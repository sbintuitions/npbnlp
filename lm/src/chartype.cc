#include"chartype.h"

using namespace std;
using namespace icu;
using namespace npbnlp;

type chartype::get(unsigned int c) {
	UnicodeString u((char*)&c, "utf8");
	UChar32 uc = u.char32At(0);
	
	UErrorCode err = U_ZERO_ERROR;
	UScriptCode s = uscript_getScript(uc, &err);
	if (U_FAILURE(err))
		throw u_errorName(err);
	int32_t wordbreak_property = u_getIntPropertyValue(uc, UCHAR_WORD_BREAK);
	int32_t block_property = u_getIntPropertyValue(uc, UCHAR_BLOCK);
	int8_t uchar_type = u_charType(uc);
	switch(s) {
		case USCRIPT_INVALID_CODE:
			throw "found invalid script code";
		case USCRIPT_ARABIC:
			return U_ARABIC;
		case USCRIPT_GREEK:
			return U_GREEK;
		case USCRIPT_HAN:
			return U_HANJI;
		case USCRIPT_HANGUL:
			return U_HANGUL;
		case USCRIPT_HEBREW:
			return U_HEBREW;
		case USCRIPT_HIRAGANA:
			return U_HIRAGANA;
		case USCRIPT_KATAKANA:
			return U_KATAKANA;
		case USCRIPT_LATIN:
			return U_LATIN;
		case USCRIPT_MYANMAR:
			return U_MYANMAR;
		case USCRIPT_THAI:
			return U_THAI;
		case USCRIPT_KATAKANA_OR_HIRAGANA:
			return U_KATA_OR_HIRA;
		case USCRIPT_COMMON:
		default:
			if (wordbreak_property == U_WB_KATAKANA)
				return U_KATAKANA;
			else if (wordbreak_property == U_WB_NUMERIC)
				return U_DIGIT;
	}
	switch(uchar_type) {
		case U_DECIMAL_DIGIT_NUMBER:
		case U_LETTER_NUMBER:
		case U_OTHER_NUMBER:
			return U_DIGIT;
		case U_NON_SPACING_MARK:
		case U_ENCLOSING_MARK:
		case U_COMBINING_SPACING_MARK:
		case U_SPACE_SEPARATOR:
		case U_LINE_SEPARATOR:
		case U_PARAGRAPH_SEPARATOR:
		case U_CONTROL_CHAR:
		case U_FORMAT_CHAR:
		case U_DASH_PUNCTUATION:
		case U_START_PUNCTUATION:
		case U_END_PUNCTUATION:
		case U_CONNECTOR_PUNCTUATION:
		case U_OTHER_PUNCTUATION:
		case U_MATH_SYMBOL:
		case U_CURRENCY_SYMBOL:
		case U_MODIFIER_SYMBOL:
		case U_OTHER_SYMBOL:
		case U_INITIAL_PUNCTUATION:
		case U_FINAL_PUNCTUATION:
			return U_SYNBOL;
	}
	switch(block_property) {
		case UBLOCK_BASIC_LATIN:
		case UBLOCK_LATIN_1_SUPPLEMENT:
		case UBLOCK_LATIN_EXTENDED_A:
		case UBLOCK_LATIN_EXTENDED_B:
		case UBLOCK_LATIN_EXTENDED_ADDITIONAL:
		case UBLOCK_LATIN_EXTENDED_C:
		case UBLOCK_LATIN_EXTENDED_D:
			return U_LATIN;
		case UBLOCK_GREEK:
		case UBLOCK_GREEK_EXTENDED:
			return U_GREEK;
		case UBLOCK_HEBREW:
			return U_HEBREW;
		case UBLOCK_ARABIC:
		case UBLOCK_ARABIC_SUPPLEMENT:
			return U_ARABIC;
		case UBLOCK_THAI:
			return U_THAI;
		case UBLOCK_MYANMAR:
		case UBLOCK_MYANMAR_EXTENDED_A:
			return U_MYANMAR;
		case UBLOCK_HANGUL_JAMO:
		case UBLOCK_HANGUL_COMPATIBILITY_JAMO:
		case UBLOCK_HANGUL_JAMO_EXTENDED_A:
		case UBLOCK_HANGUL_JAMO_EXTENDED_B:
		case UBLOCK_HANGUL_SYLLABLES:
			return U_HANGUL;
		case UBLOCK_CJK_RADICALS_SUPPLEMENT:
		case UBLOCK_KANGXI_RADICALS:
		case UBLOCK_IDEOGRAPHIC_DESCRIPTION_CHARACTERS:
		case UBLOCK_CJK_SYMBOLS_AND_PUNCTUATION:
		case UBLOCK_KANBUN:
		case UBLOCK_ENCLOSED_CJK_LETTERS_AND_MONTHS:
		case UBLOCK_CURRENCY_SYMBOLS:
		case UBLOCK_COMBINING_MARKS_FOR_SYMBOLS:
		case UBLOCK_LETTERLIKE_SYMBOLS:
		case UBLOCK_NUMBER_FORMS:
		case UBLOCK_ARROWS:
		case UBLOCK_MATHEMATICAL_OPERATORS:
		case UBLOCK_ALPHABETIC_PRESENTATION_FORMS:
		case UBLOCK_ARABIC_PRESENTATION_FORMS_A:
		case UBLOCK_COMBINING_HALF_MARKS:
		case UBLOCK_CJK_COMPATIBILITY_FORMS:
		case UBLOCK_SMALL_FORM_VARIANTS:
		case UBLOCK_ARABIC_PRESENTATION_FORMS_B:
		case UBLOCK_SPECIALS:
		case UBLOCK_HALFWIDTH_AND_FULLWIDTH_FORMS:
		case UBLOCK_DESERET:
		case UBLOCK_BYZANTINE_MUSICAL_SYMBOLS:
		case UBLOCK_MUSICAL_SYMBOLS:
		case UBLOCK_MATHEMATICAL_ALPHANUMERIC_SYMBOLS:
		case UBLOCK_TAGS:
		case UBLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A:
		case UBLOCK_SUPPLEMENTAL_ARROWS_A:
		case UBLOCK_SUPPLEMENTAL_ARROWS_B:
		case UBLOCK_SUPPLEMENTAL_MATHEMATICAL_OPERATORS:
		case UBLOCK_VARIATION_SELECTORS:
		case UBLOCK_KHMER_SYMBOLS:
		case UBLOCK_PHONETIC_EXTENSIONS:
		case UBLOCK_MISCELLANEOUS_SYMBOLS_AND_ARROWS:
		case UBLOCK_YIJING_HEXAGRAM_SYMBOLS:
		case UBLOCK_LINEAR_B_SYLLABARY:
		case UBLOCK_LINEAR_B_IDEOGRAMS:
		case UBLOCK_AEGEAN_NUMBERS:
		case UBLOCK_TAI_XUAN_JING_SYMBOLS:
		case UBLOCK_VARIATION_SELECTORS_SUPPLEMENT:
		case UBLOCK_ANCIENT_GREEK_MUSICAL_NOTATION:
		case UBLOCK_ANCIENT_GREEK_NUMBERS:
		case UBLOCK_COMBINING_DIACRITICAL_MARKS:
		case UBLOCK_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT:
		case UBLOCK_PHONETIC_EXTENSIONS_SUPPLEMENT:
		case UBLOCK_SUPPLEMENTAL_PUNCTUATION:
		case UBLOCK_VERTICAL_FORMS:
		case UBLOCK_CUNEIFORM:
		case UBLOCK_CUNEIFORM_NUMBERS_AND_PUNCTUATION:
		case UBLOCK_COUNTING_ROD_NUMERALS:
		case UBLOCK_SUNDANESE:
		case UBLOCK_ANCIENT_SYMBOLS:
		case UBLOCK_PHAISTOS_DISC:
		case UBLOCK_MAHJONG_TILES:
		case UBLOCK_DOMINO_TILES:
		case UBLOCK_RUMI_NUMERAL_SYMBOLS:
		case UBLOCK_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT:
		case UBLOCK_PLAYING_CARDS:
		case UBLOCK_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS:
		case UBLOCK_EMOTICONS:
		case UBLOCK_TRANSPORT_AND_MAP_SYMBOLS:
		case UBLOCK_ALCHEMICAL_SYMBOLS:
			return U_SYNBOL;
		case UBLOCK_HIRAGANA:
			return U_HIRAGANA;
		case UBLOCK_KATAKANA:
		case UBLOCK_KATAKANA_PHONETIC_EXTENSIONS:
		case UBLOCK_KANA_SUPPLEMENT:
			return U_KATAKANA;
		case UBLOCK_CJK_COMPATIBILITY:
		case UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A:
		case UBLOCK_CJK_UNIFIED_IDEOGRAPHS:
		case UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS:
		case UBLOCK_CJK_STROKES:
		case UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B:
		case UBLOCK_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT:
		case UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C:
		case UBLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D:
			return U_HANJI;
		default:
			return U_MISC;
	}
}
