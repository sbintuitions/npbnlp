include_directories(${CMAKE_SOURCE_DIR}/io/include)
include_directories(${CMAKE_SOURCE_DIR}/rd/include)
include_directories(${CMAKE_SOURCE_DIR}/lm/include)
include_directories(${CMAKE_SOURCE_DIR}/sb/include)
include_directories(${CMAKE_SOURCE_DIR}/dt/include)
include_directories(${CPLUS_INCLUDE_PATH})
link_directories(${CMAKE_SOURCE_DIR}/io/src)
link_directories(${CMAKE_SOURCE_DIR}/rd/src)
link_directories(${CMAKE_SOURCE_DIR}/lm/src)
link_directories(${LIBRARY_PATH})
#add_executable(sbd main.cc sbd.cc cio.cc)
add_executable(usbd usbd_main.cc usbd.cc usbd_l.cc usbd_w.cc cio.cc)
#add_executable(pcc poisson_concat.cc)
add_executable(eval eval.cc cio.cc)
add_executable(error error.cc cio.cc)
add_executable(ckappa cohens_kappa.cc cio.cc)
add_executable(fkappa fleiss_kappa.cc cio.cc)
#add_executable(filter filter.cc cio.cc)
#add_executable(correct correct_data.cc cio.cc)
#add_executable(label split.cc cio.cc)
#add_library(sb SHARED sbd.cc usbd.cc usbd_l.cc usbd_w.cc)
add_library(sb SHARED usbd.cc usbd_l.cc usbd_w.cc)

target_compile_options(sbd PUBLIC
	$<$<CONFIG:Release>:-O3 -std=c++17>
	$<$<CONFIG:Debug>:-g -std=c++17>
	)

find_package(Boost COMPONENTS serialization REQUIRED)
find_package(OpenMP)
if (OpenMP_CXX_FOUND)
	#	target_link_libraries(sbd PUBLIC OpenMP::OpenMP_CXX io rd lm icuuc ${Boost_LIBRARIES})
	target_link_libraries(usbd PUBLIC OpenMP::OpenMP_CXX io rd lm icuuc ${Boost_LIBRARIES})
	#	target_link_libraries(pcc PUBLIC io rd)
	target_link_libraries(eval PUBLIC io rd)
	target_link_libraries(error PUBLIC io rd)
	target_link_libraries(ckappa PUBLIC io rd)
	target_link_libraries(fkappa PUBLIC io rd)
	#target_link_libraries(filter PUBLIC io rd)
	#target_link_libraries(correct PUBLIC io rd)
	#target_link_libraries(label PUBLIC io rd)
	target_link_libraries(sb PUBLIC OpenMP::OpenMP_CXX io rd lm icuuc ${Boost_LIBRARIES})
else()
	#	target_link_libraries(sbd PUBLIC io rd lm icuuc ${Boost_LIBRARIES})
	target_link_libraries(usbd PUBLIC io rd lm icuuc ${Boost_LIBRARIES})
	#target_link_libraries(pcc PUBLIC io rd)
	target_link_libraries(eval PUBLIC io rd)
	target_link_libraries(error PUBLIC io rd)
	target_link_libraries(ckappa PUBLIC io rd)
	target_link_libraries(fkappa PUBLIC io rd)
	#target_link_libraries(filter PUBLIC io rd)
	#target_link_libraries(correct PUBLIC io rd)
	#target_link_libraries(label PUBLIC io rd)
	target_link_libraries(sb PUBLIC io rd lm icuuc ${Boost_LIBRARIES})
endif()

#target_link_directories(sbd PUBLIC /usr/local/lib)
target_link_directories(usbd PUBLIC /usr/local/lib)
target_link_directories(pcc PUBLIC /usr/local/lib)
target_link_directories(sb PUBLIC /usr/local/lib)
